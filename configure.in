AC_INIT()

AC_CONFIG_HEADER(common/c_config.h)
AC_CONFIG_AUX_DIR(script)

if test -d ${top_srcdir-$srcdir}/mkf -a -d ${top_srcdir-$srcdir}/kiklib ; then
	mkdir -p mkf kiklib
	ln -sf ../kiklib ${top_srcdir-$srcdir}/mkf
	ln -sf ../kiklib mkf
	SUBDIRS="kiklib mkf"
	MKF_LIBS='${top_builddir}/mkf/lib/libmkf.la'
	MKF_CFLAGS='-I${top_builddir}/mkf/include'
	KIK_LIBS='${top_builddir}/kiklib/src/libkik.la'
	KIK_CFLAGS='-I${top_builddir}/kiklib/include'
else
	MKF_LIBS="-lmkf"
	KIK_LIBS="-lkik"
fi
AC_SUBST(MKF_LIBS)
AC_SUBST(MKF_CFLAGS)
AC_SUBST(KIK_LIBS)
AC_SUBST(KIK_CFLAGS)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AC_PROG_CC
AC_PROG_INSTALL

AC_LIBTOOL_WIN32_DLL
AC_LIBTOOL_DLOPEN
AC_ARG_WITH(libtool,
	[  --with-libtool          libtool path[default=without]],
	libtool=$with_libtool)
if test "${libtool}" != "" ; then
	LIBTOOL=${libtool}
else
	AM_PROG_LIBTOOL
	LIBTOOL='${top_builddir}/libtool'
fi
AC_SUBST(LIBTOOL)

AC_CHECK_LIB(socket,connect,SOCK_LIBS=-lsocket)
AC_SUBST(SOCK_LIBS)

AC_PATH_XTRA

# Li18nux Xlib-I18N defines X_HAVE_UTF8_STRING but has no Xutf8LookupString.
ldflags="$LDFLAGS" cflags="$CFLAGS"
LDFLAGS="$LDFLAGS $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS" CFLAGS="$X_CFLAGS $CFLAGS"
AC_CHECK_LIB(X11,Xutf8LookupString,XUTF8_CFLAGS="-DHAVE_XUTF8_LOOKUP_STRING")
LDFLAGS="$ldflags" CFLAGS="$cflags"
AC_SUBST(XUTF8_CFLAGS)

AC_ARG_ENABLE(debug,
	[  --enable-debug          debug[default=disabled]],
	debug=$enable_debug)
if test "$debug" = "yes" ; then
	DEB_CFLAGS="-DDEBUG -DKIK_DEBUG"
fi
AC_SUBST(DEB_CFLAGS)
AC_SUBST(OPT_CFLAGS)

AC_ARG_ENABLE(fribidi,
	[  --enable-fribidi        bidi[default=disabled]],
	fribidi=$enable_fribidi)
if test "$fribidi" = "yes" ; then
	AC_CHECK_PROG(fribidi_config,fribidi-config,yes)
	if test "$fribidi_config" = "yes" ; then
		FRIBIDI_CFLAGS="`fribidi-config --cflags` -DUSE_FRIBIDI"
		FRIBIDI_LIBS="`fribidi-config --libs`"
	fi
fi
AC_SUBST(FRIBIDI_CFLAGS)
AC_SUBST(FRIBIDI_LIBS)

# default value
IMAGELIB_NAME=none
AC_ARG_WITH(imagelib,
	[  --with-imagelib[=ARG]   image library (imlib|gdk-pixbuf)],
	imagelib=$with_imagelib)
case ${imagelib} in
imlib)
	AC_CHECK_PROG(imlib_config,imlib-config,yes)
	if test "$imlib_config" = "yes" ; then
		IMAGELIB_CFLAGS="`imlib-config --cflags` -DUSE_IMLIB"
		IMAGELIB_LIBS="`imlib-config --libs`"
		IMAGELIB_NAME=imlib
	fi
	;;
gdk-pixbuf)
	PKG_CHECK_MODULES(IMAGELIB, gdk-pixbuf-2.0, [
		IMAGELIB_NAME=gdk
		IMAGELIB_CFLAGS="${IMAGELIB_CFLAGS} -DUSE_GDK_PIXBUF"
	])
	if test "x$IMAGELIB_NAME" = "xnone" ; then
		AC_CHECK_PROG(pkg_config,gdk-pixbuf-config,yes)
		if test "$pkg_config" = "yes" ; then
			IMAGELIB_CFLAGS="`gdk-pixbuf-config --cflags` -DUSE_GDK_PIXBUF"
			IMAGELIB_LIBS="`gdk-pixbuf-config --libs`"
			IMAGELIB_NAME=gdk
		fi
	fi
	;;
gdk-pixbuf2)
	PKG_CHECK_MODULES(IMAGELIB, gdk-pixbuf-2.0, [
		IMAGELIB_NAME=gdk
		IMAGELIB_CFLAGS="${IMAGELIB_CFLAGS} -DUSE_GDK_PIXBUF"
	])
	;;
gdk-pixbuf1)
	AC_CHECK_PROG(pkg_config,gdk-pixbuf-config,yes)
	if test "$pkg_config" = "yes" ; then
		IMAGELIB_CFLAGS="`gdk-pixbuf-config --cflags` -DUSE_GDK_PIXBUF"
		IMAGELIB_LIBS="`gdk-pixbuf-config --libs`"
		IMAGELIB_NAME=gdk
	fi
	;;
*)
	if test "${imagelib}" != "" ; then
		echo ""
		echo "${imagelib} library is NOT supported."
		echo ""
		exit 1
	fi
	;;
esac
AC_SUBST(IMAGELIB_CFLAGS)
AC_SUBST(IMAGELIB_LIBS)
AC_SUBST(IMAGELIB_NAME)

# --enable-anti-alias is backward compatibility for --with-type-engines
AC_ARG_ENABLE(anti_alias,
	[  --enable-anti-alias     (obsoleted)anti alias[default=disabled]],
	anti_alias=$enable_anti_alias)
	
AC_ARG_WITH(type_engines,
	[  --with-type-engines     type engines[default=xcore]],
	type_engines=$with_type_engines)

if test "$anti_alias" = "yes" ; then
	type_engines="xcore xft"
fi

if test "$type_engines" = ""; then
	type_engines="xcore"
fi

type_engines=`echo ${type_engines} | sed 's/,/ /g'`
for type_engine in ${type_engines} ; do
case ${type_engine} in
xft)
	PKG_CHECK_MODULES(XFT, xft, have_xft=yes, have_xft=no)
	if test "$have_xft" = "yes" ; then
		AA_CFLAGS="-DUSE_TYPE_XFT  ${XFT_CFLAGS} ${AA_CFLAGS}"
		AA_LIBS="${XFT_LIBS} ${AA_LIBS}"
	else
		AA_CFLAGS="-DUSE_TYPE_XFT ${AA_CFLAGS}"
		AA_LIBS="-lXft ${AA_LIBS}"
	fi
	;;
xcore)
	AA_CFLAGS="-DUSE_TYPE_XCORE ${AA_CFLAGS}"
	;;
*)
	echo "${type_engine} is unknown type engine."
	;;
esac
done

if test "${AA_CFLAGS}" = "" ; then
	echo "no type engine specified."
	exit 1
fi

AC_SUBST(AA_CFLAGS)
AC_SUBST(AA_LIBS)
AC_SUBST(PROG)

AC_ARG_ENABLE(ind,
	[  --enable-ind            libind[default=disabled]],
	ind=$enable_ind, ind="no")
if test "$ind" = "yes" ; then
	AC_CHECK_LIB(ind,indian_init,
		[
		IND_CFLAGS="-DUSE_IND"
		IND_LIBS="-lind"
		])
fi
AC_SUBST(IND_LIBS)
AC_SUBST(IND_CFLAGS)

AC_ARG_ENABLE(utmp,
	[  --enable-utmp           utmp[default=disabled]],
	utmp=$enable_utmp)
if test "$utmp" = "yes" ; then
	UTMP_CFLAGS="-DUSE_UTMP"
	has_utmp=`grep utmp /etc/group 2>/dev/null`
	if test "$has_utmp" ; then
		INSTALL_OPT="-m 2755 -g utmp"
	else
		INSTALL_OPT="-m 4755 -o root"
	fi
else
	INSTALL_OPT="-m 755"
fi
AC_SUBST(UTMP_CFLAGS)
AC_SUBST(INSTALL_OPT)

PKG_CHECK_MODULES(GTK, gtk+-2.0, have_gtk2=yes, have_gtk2=no)
if test "$have_gtk2" = "yes" ; then
	gtk_config=yes
	GTK_CONFIG="pkg-config gtk+-2.0"
else
	AC_CHECK_PROG(gtk_config,gtk-config,yes)
	if test "$gtk_config" = "yes" ; then
		AC_PATH_PROG(GTK_CONFIG,gtk-config,/usr/local/bin/gtk-config,$PATH)
	else
		# for Daichi Goto-san:)
		AC_CHECK_PROG(gtk_config,gtk12-config,yes)
		if test "$gtk_config" = "yes" ; then
			AC_PATH_PROG(GTK_CONFIG,gtk12-config,/usr/X11R6/bin/gtk12-config,$PATH)
		fi
	fi
	GTK_CFLAGS='gtk-config --cflags'
	GTK_LIBS='gtk-config --libs'

	AC_SUBST(GTK_CFLAGS)
	AC_SUBST(GTK_LIBS)
fi
AC_SUBST(GTK_CONFIG)

tools="mlclient,mlconfig,mlterm-menu,mlcc"
AC_ARG_WITH(tools,
	[  --with-tools[=ARG]      external tools [default=mlclient,mlconfig,mlterm-menu,mlcc]],
	[
	# If given --without-tools or --with-tools with no args.
	if test "${with_tools}" = "no" ; then
		tools=""
	elif test "${with_tools}" != "yes" ; then
		tools=${with_tools}
	fi
	])
tools=`echo ${tools} | sed 's/,/ /g'`
for tool in ${tools} ; do
case ${tool} in
mlconfig)
	if test "${gtk_config}" = "yes" ; then
		MAKE_DIRS="tool/mlconfig ${MAKE_DIRS}"
		OUTPUT_FILES="tool/mlconfig/Makefile tool/mlconfig/po/Makefile.in ${OUTPUT_FILES}"
	else
		echo ""
		echo "** WARNING  **"
		echo " couldn't compile mlconfig since headers/libraries of GTK are missing."
		echo ""
	fi
	;;
mlterm-menu)
	if test "${gtk_config}" = "yes" ; then
		MAKE_DIRS="contrib/tool/mlterm-menu ${MAKE_DIRS}"
		OUTPUT_FILES="contrib/tool/mlterm-menu/Makefile ${OUTPUT_FILES}"
	else
		echo ""
		echo "** WARNING  **"
		echo " couldn't compile mlterm-menu since headers/libraries of GTK are missing."
		echo ""
	fi
	;;
mlclient)
	MAKE_DIRS="tool/mlclient ${MAKE_DIRS}"
	OUTPUT_FILES="tool/mlclient/Makefile ${OUTPUT_FILES}"
	;;
w3mmlconfig)
	MAKE_DIRS="tool/w3mmlconfig ${MAKE_DIRS}"
	;;
mlcc)
	MAKE_DIRS="contrib/tool/mlcc ${MAKE_DIRS}"
	OUTPUT_FILES="contrib/tool/mlcc/Makefile ${OUTPUT_FILES}"
	;;
mlmenu)
	MAKE_DIRS="tool/mlmenu ${MAKE_DIRS}"
	OUTPUT_FILES="tool/mlmenu/Makefile ${OUTPUT_FILES}"
	;;
mlterm-zoom)
	MAKE_DIRS="contrib/tool/mlterm-zoom ${MAKE_DIRS}"
	OUTPUT_FILES="contrib/tool/mlterm-zoom/Makefile ${OUTPUT_FILES}"
	;;
*)
	echo "${tool} is unknown tool."
	;;
esac
done

#
# --- libltdl ---
#
AC_ARG_WITH(libltdl,
	[  --with-libltdl[=PREFIX] load modules with libltdl[default=without]],,
	[with_libltdl=no])
# We don't check here wheter libltdl is installed. (See kiklib/src/configure.in)

#
# --- Xdnd ---
#
AC_ARG_ENABLE(dnd,
	[  --enable-dnd            dnd [default=enabled]],
	dnd=$enable_dnd)
if test "$dnd" = "no" ; then
	DND_CFLAGS="-DDISABLE_XDND"
else
	DND_LIBS="x_dnd.o"
fi
AC_SUBST(DND_CFLAGS)
AC_SUBST(DND_LIBS)

#
# --- uim ---
#
AC_ARG_ENABLE(uim,
	[  --enable-uim            uim [default=disabled]],
	uim=$enable_uim)
if test "$enable_uim" = yes ; then
	PKG_CHECK_MODULES(UIM, uim, have_uim=yes, have_uim=no)
	if test "$have_uim" = yes ; then
		UIM_CFLAGS="-DUSE_UIM `pkg-config uim --cflags`"
		UIM_LIBS=`pkg-config uim --libs`
		MAKE_DIRS="inputmethod/uim ${MAKE_DIRS}"
		OUTPUT_FILES="inputmethod/uim/Makefile ${OUTPUT_FILES}"
		# check API
		ml_saved_libs="$LIBS"
		LIBS="$UIM_LIBS"
		AC_CHECK_LIB(uim, uim_get_default_im_name,
			     [
			     UIM_CFLAGS="$UIM_CFLAGS -DUIM_CAN_GET_DEFAULT_IM"
			     ])
		AC_CHECK_LIB(uim, uim_get_im_short_desc,
			     [
			     UIM_CFLAGS="$UIM_CFLAGS -DUIM_CAN_GET_IM_DESC"
			     ])
		LIBS="$ml_saved_libs"
	fi
fi
AC_SUBST(UIM_CFLAGS)
AC_SUBST(UIM_LIBS)

#
# --- iiimf ---
#
AC_ARG_ENABLE(iiimf,
	[  --enable-iiimf          IIIMF [default=disabled]],
	iiimf=$enable_iiimf)
if test "$enable_iiimf" = yes ; then
	AC_CHECK_LIB(iiimcf, iiimcf_create_context,
		[
		IIIMF_CFLAGS="-DUSE_IIIMF"
		IIIMF_LIBS="-liiimcf"
		MAKE_DIRS="inputmethod/iiimf ${MAKE_DIRS}"
		OUTPUT_FILES="inputmethod/iiimf/Makefile ${OUTPUT_FILES}"
		],
		[
		enable_iiimf=no
		])
fi
AC_SUBST(IIIMF_CFLAGS)
AC_SUBST(IIIMF_LIBS)

#
# --- scrollbar plugins ---
#
# defaut settings
DL_LIBS=
DL_SELF=
scrollbars="sample,extra"

AC_ARG_WITH(scrollbars,
	[  --with-scrollbars[=ARG] scrollbar plugins [default=sample,extra]],
	[
	# If given --without-scrollbars or --with-scrollbars with no args.
	if test "${with_scrollbars}" = "no" ; then
		scrollbars=""
	elif test "${with_scrollbars}" != "yes" ; then
		scrollbars=${with_scrollbars}
	fi
	])
scrollbars=`echo ${scrollbars} | sed 's/,/ /g'`
for scrollbar in ${scrollbars} ; do
case ${scrollbar} in
sample)
	MAKE_DIRS="scrollbar/sample ${MAKE_DIRS}"
	OUTPUT_FILES="scrollbar/sample/Makefile ${OUTPUT_FILES}"
	if test "x$with_libltdl" != "xno" ; then
		for name in sample sample2 ; do
			DL_LIBS="-dlopen \$(top_builddir)/scrollbar/sample/lib$name.la ${DL_LIBS}"
		done
	fi
	;;
extra)
	MAKE_DIRS="contrib/scrollbar/extra ${MAKE_DIRS}"
	OUTPUT_FILES="contrib/scrollbar/extra/Makefile ${OUTPUT_FILES}"
	if test "x$with_libltdl" != "xno" ; then
		for name in athena next motif mozmodern ; do
			DL_LIBS="-dlopen \$(top_builddir)/contrib/scrollbar/extra/lib$name.la ${DL_LIBS}"
		done
	fi
	;;
pixmap_engine)
	if test "x$allow_undefined_flag" = "xunsupported" ; then
		echo ""
		echo "pixmap_engine has undefined symbols. $host_os does NOT allow it. Please retry"
		echo "to run configure scripts without pixmap_engine"
		echo "(e.g.  --with-scrllbars=sample,extra)"
		echo ""
		exit 1
	fi
	if test "$IMAGELIB_NAME" = "gdk" -o "$IMAGELIB_NAME" = "imlib" ; then
		MAKE_DIRS="contrib/scrollbar/pixmap_engine ${MAKE_DIRS}"
		OUTPUT_FILES="contrib/scrollbar/pixmap_engine/Makefile contrib/scrollbar/pixmap_engine/sample3/Makefile ${OUTPUT_FILES}"
		if test "x$with_libltdl" != "xno" ; then
			DL_LIBS="-export-dynamic -dlopen \$(top_builddir)/contrib/scrollbar/pixmap_engine/libpixmap_engine.la ${DL_LIBS}"
		else
			DL_LIBS="-export-dynamic"
		fi
	else
		echo ""
		echo "To use pixmap_engine for scrollbar, you will need the image library such as"
		echo "gdk-pixbuf and imlib. (e.g. --with-imagelib=imlib)"
		echo ""
		exit 1
	fi
	;;
*)
	echo "${scrollbar} is unknown scrollbar."
	;;
esac
done # for scrollbar in ${scrollbars}

if test "x$with_libltdl" != "xno" ; then
	DL_SELF="-dlopen self"
fi
AC_SUBST(DL_LIBS)
AC_SUBST(DL_SELF)

AC_ARG_ENABLE(optimize_redrawing,
	[  --enable-optimize-redrawing optimize redrawing a line[default=disabled]],
	optimize_redrawing=$enable_optimize_redrawing)
if test "$optimize_redrawing" = "yes" ; then
	CFLAGS="$CFLAGS -DOPTIMIZE_REDRAWING"
fi

case "${host_os}" in
mingw32*)
#	MAKE_DIRS="mlterm win32"
	MAKE_DIRS="mlterm"
#	OUTPUT_FILES="Makefile mlterm/Makefile win32/Makefile etc/Makefile"
	OUTPUT_FILES="Makefile mlterm/Makefile etc/Makefile"
	ML_PTY_OBJ="ml_pty_win32.o"
	PLATFORM_LIB_LDFLAGS="-no-undefined"
	;;
*)
	MAKE_DIRS="mlterm ${MAKE_DIRS} xwindow man etc"
	OUTPUT_FILES="Makefile mlterm/Makefile xwindow/Makefile man/Makefile etc/Makefile ${OUTPUT_FILES}"
	ML_PTY_OBJ="ml_pty.o"
	PLATFORM_LIB_LDFLAGS=""
	;;
esac
AC_SUBST(ML_PTY_OBJ)
AC_SUBST(MAKE_DIRS)
AC_SUBST(OUTPUT_FILES)
AC_SUBST(PLATFORM_LIB_LDFLAGS)

# gettext
AM_INIT_AUTOMAKE(mlterm,2.8.0)
AM_GNU_GETTEXT([external])

# XXX(maybe not portable)
if test "${USE_NLS}" = "yes" ; then
	AC_CHECK_LIB(intl,gettext,
		[
		INTL_LIBS="-lintl"
		])
fi
AC_SUBST(INTL_LIBS)

#
# --- check for undefined symbol ---
#
AC_MSG_CHECKING([for undefined symbol])
if test "x$allow_undefined_flag" = "xunsupported" ; then
	AC_MSG_RESULT([not supported])
	NO_UNDEFINED_FLAG="-no-undefined"
else
	AC_MSG_RESULT(supported)
	NO_UNDEFINED_FLAG=""
fi
AC_SUBST(NO_UNDEFINED_FLAG)

# CVS revision
CVS_REVISION=`tail -n 1 ${top_srcdir-$srcdir}/ChangeLog | sed -n 's/^.Id: .* \(.*\) .* .* .* Exp .$/\1/p'`
AC_SUBST(CVS_REVISION)
OUTPUT_FILES="xwindow/version.h ${OUTPUT_FILES}"

if test "${SUBDIRS}" != "" ; then
	AC_CONFIG_SUBDIRS(${SUBDIRS})
fi

if test "${MAKE_DIRS}" != "" ; then
	mkdir -p ${MAKE_DIRS}
fi

AC_OUTPUT(${OUTPUT_FILES})

# Spit out the configuration

echo
echo
echo "Mlterm was configured as follows"
echo
echo "Installation path prefix          : $prefix"
dnl echo "Character mapping table           : "
dnl echo "Character property table          : "
echo "build shared libraries            : $enable_shared"
echo "build static libraries            : $enable_static"
echo -n "Optimization for redrawing a line : "
  if test "x$optimize_redrawing" = xyes ; then echo "yes" ; else echo "no" ; fi
echo -n "BiDi rendering (Fribidi)          : "
  if test "x$fribidi_config" = xyes ; then echo "yes" ; else echo "no" ; fi
echo "ISCII rendering (libind)          : $ind"
echo -n "External tools                    : "
  echo `echo "$with_tools" | sed 's/,/ /g'`
echo "Image library                     : $with_imagelib"
echo -n "utmp support                      : "
  if test "x$utmp" = xyes ; then echo "yes" ; else echo "no" ; fi
echo "Type engine                       : $type_engines"
echo -n "DnD                               : "
  if test "$enable_dnd" = xno ; then echo "no" ; else echo "yes" ; fi
echo -n "Input Methods                     : XIM "
  if test "x$have_uim" = xyes ; then echo -n "uim " ; fi
  if test "x$enable_iiimf" = xyes ; then echo -n "IIIMF " ; fi
echo
echo -n "Scrollbars                        : simple "
  echo `echo "$with_scrollbars" | sed 's/,/ /g'`
echo

